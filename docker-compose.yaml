version: "3" # This specifies the version of the Compose file format being used.

services:
  postgres: # The PostgreSQL service
    image: postgres # The Docker image to use for the PostgreSQL container
    environment: # Environment variables to configure the PostgreSQL instance
      POSTGRES_DB: bakhadherdb # Database name
      POSTGRES_USER: postgres # PostgreSQL superuser username
      POSTGRES_PASSWORD: postgres # PostgreSQL superuser password
    ports:
      - "5432:5432" # Maps the container's PostgreSQL port to the host's port (5432 in this case)
    volumes: # Mounts a volume to persist the PostgreSQL data
      - ./data:/var/lib/postgresql/data

  pgadmin: # The PGAdmin service
    container_name: pgadmin # Assigns a name to the PGAdmin container
    image: dpage/pgadmin4 # The Docker image to use for the PGAdmin container
    restart: always # Ensures the PGAdmin container restarts automatically
    links: # Links the PGAdmin container to the 'postgres' container (deprecated in favor of 'networks' in newer versions)
      - postgres
    ports:
      - "5050:80" # Maps the container's port 80 to the host's port 5050
    environment: # Environment variables to configure PGAdmin
      PGADMIN_DEFAULT_EMAIL: postgres@pgadmin.com # Default email for the PGAdmin admin user
      PGADMIN_DEFAULT_PASSWORD: postgres # Default password for the PGAdmin admin user
    depends_on: # Specifies that the 'pgadmin' service depends on the 'postgres' service
      - postgres
# To run this Docker Compose file:

# Make sure you have Docker and Docker Compose installed on your system.

# Navigate to the directory where the Docker Compose file is located in your terminal.

# Run the following command to start the defined services:
# docker-compose up
# This command will start the PostgreSQL and PGAdmin containers with the specified configurations.

# Access PGAdmin by opening a web browser and navigating to http://localhost:5050. You can log in using the default email and password specified in the Compose file.

# You can use PGAdmin to connect to the PostgreSQL database using the PostgreSQL superuser credentials (postgres/postgres) and manage the database.

# To stop the containers, press Ctrl+C in the terminal where Docker Compose is running, or run:
# docker-compose down
# This will stop and remove the containers, but the data will persist in the ./data directory on your host machine, thanks to the volume mapping.

# How to build a docker image after write dockerfile ?
#docker build -t NAME. ->the dot is the path to dockerfile
#Youtube link https://www.youtube.com/watch?v=gAkwW2tuIqE&ab_channel=Fireship

